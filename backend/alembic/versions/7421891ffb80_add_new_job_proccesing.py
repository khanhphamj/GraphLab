"""add new job proccesing

Revision ID: 7421891ffb80
Revises: 4e1bcef5bb7b
Create Date: 2025-09-16 15:07:33.134700

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7421891ffb80'
down_revision: Union[str, Sequence[str], None] = '4e1bcef5bb7b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Fix enum rename for brainstorm_sessions.status
    # First, create the new enum type
    op.execute("CREATE TYPE brainstorm_session_status AS ENUM('active', 'completed', 'archived')")
    
    # Update the column to use the new enum type
    op.alter_column('brainstorm_sessions', 'status',
               existing_type=postgresql.ENUM('active', 'completed', 'archived', name='session_status'),
               type_=postgresql.ENUM('active', 'completed', 'archived', name='brainstorm_session_status'),
               existing_nullable=False,
               postgresql_using='status::text::brainstorm_session_status')
    
    # Drop the old enum type
    op.execute("DROP TYPE session_status")
    
    op.add_column('conversations', sa.Column('owner_id', sa.UUID(), nullable=False))
    
    # Create conversation_type enum before using it
    op.execute("CREATE TYPE conversation_type AS ENUM('research_chat', 'schema_design', 'data_exploration')")
    op.add_column('conversations', sa.Column('conversation_type', postgresql.ENUM('research_chat', 'schema_design', 'data_exploration', name='conversation_type'), nullable=False))
    
    op.add_column('conversations', sa.Column('active_filters', sa.JSON(), nullable=True))
    op.add_column('conversations', sa.Column('query_history', sa.JSON(), nullable=True))
    op.drop_constraint(op.f('conversations_created_by_fkey'), 'conversations', type_='foreignkey')
    op.create_foreign_key(None, 'conversations', 'users', ['owner_id'], ['id'], ondelete='CASCADE')
    op.drop_column('conversations', 'context_data')
    op.drop_column('conversations', 'created_by')
    
    # Create message_type enum before using it
    op.execute("CREATE TYPE message_type AS ENUM('text', 'query_result', 'schema_suggestion', 'error')")
    op.add_column('messages', sa.Column('message_type', postgresql.ENUM('text', 'query_result', 'schema_suggestion', 'error', name='message_type'), nullable=False))
    
    op.add_column('messages', sa.Column('tool_calls', sa.JSON(), nullable=True))
    op.add_column('messages', sa.Column('neo4j_refs', sa.JSON(), nullable=True))
    op.add_column('messages', sa.Column('thread_position', sa.Integer(), nullable=False))
    op.add_column('messages', sa.Column('seq', sa.BigInteger(), nullable=False))
    op.drop_constraint(op.f('messages_parent_message_id_fkey'), 'messages', type_='foreignkey')
    op.create_foreign_key(None, 'messages', 'messages', ['parent_message_id'], ['id'])
    op.drop_column('messages', 'deleted_at')
    op.drop_column('messages', 'metadata')
    op.add_column('paper_analysis', sa.Column('model_used', sa.String(), nullable=True))
    op.drop_column('paper_analysis', 'model_version')
    op.drop_column('paper_analysis', 'processing_time_ms')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.add_column('paper_analysis', sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('paper_analysis', sa.Column('model_version', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('paper_analysis', 'model_used')
    op.add_column('messages', sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('messages', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'messages', type_='foreignkey')
    op.create_foreign_key(op.f('messages_parent_message_id_fkey'), 'messages', 'messages', ['parent_message_id'], ['id'], ondelete='SET NULL')
    op.drop_column('messages', 'seq')
    op.drop_column('messages', 'thread_position')
    op.drop_column('messages', 'neo4j_refs')
    op.drop_column('messages', 'tool_calls')
    op.drop_column('messages', 'message_type')
    
    # Drop message_type enum
    op.execute("DROP TYPE message_type")
    
    op.add_column('conversations', sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('conversations', sa.Column('context_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'conversations', type_='foreignkey')
    op.create_foreign_key(op.f('conversations_created_by_fkey'), 'conversations', 'users', ['created_by'], ['id'], ondelete='CASCADE')
    op.drop_column('conversations', 'query_history')
    op.drop_column('conversations', 'active_filters')
    op.drop_column('conversations', 'conversation_type')
    op.drop_column('conversations', 'owner_id')
    
    # Drop conversation_type enum
    op.execute("DROP TYPE conversation_type")
    
    # Fix enum rename for brainstorm_sessions.status in downgrade
    # First, create the old enum type
    op.execute("CREATE TYPE session_status AS ENUM('active', 'completed', 'archived')")
    
    # Update the column to use the old enum type
    op.alter_column('brainstorm_sessions', 'status',
               existing_type=postgresql.ENUM('active', 'completed', 'archived', name='brainstorm_session_status'),
               type_=postgresql.ENUM('active', 'completed', 'archived', name='session_status'),
               existing_nullable=False,
               postgresql_using='status::text::session_status')
    
    # Drop the new enum type
    op.execute("DROP TYPE brainstorm_session_status")
    # ### end Alembic commands ###
