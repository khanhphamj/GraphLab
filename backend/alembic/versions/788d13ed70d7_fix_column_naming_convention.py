"""fix_column_naming_convention

Revision ID: 788d13ed70d7
Revises: 9437ba7f0a94
Create Date: 2025-08-29 07:12:56.376527

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '788d13ed70d7'
down_revision: Union[str, Sequence[str], None] = '9437ba7f0a94'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('labs', sa.Column('owner_id', sa.UUID(), nullable=False))
    op.add_column('labs', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('labs', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('labs', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.drop_constraint(op.f('uix_owner_name'), 'labs', type_='unique')
    op.create_unique_constraint('uix_owner_name', 'labs', ['owner_id', 'name'])
    op.drop_constraint(op.f('labs_ownerId_fkey'), 'labs', type_='foreignkey')
    op.create_foreign_key(None, 'labs', 'users', ['owner_id'], ['id'], ondelete='CASCADE')
    op.drop_column('labs', 'createdAt')
    op.drop_column('labs', 'ownerId')
    op.drop_column('labs', 'updatedAt')
    op.drop_column('labs', 'deletedAt')
    op.add_column('paper_authors', sa.Column('author_name', sa.String(length=1000), nullable=False))
    op.add_column('paper_authors', sa.Column('paper_id', sa.Integer(), nullable=False))
    op.add_column('paper_authors', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('paper_authors', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('paper_authors', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.drop_index(op.f('ix_paper_authors_paperId'), table_name='paper_authors')
    op.drop_index(op.f('ix_paper_authors_paper'), table_name='paper_authors')
    op.create_index('ix_paper_authors_paper', 'paper_authors', ['paper_id'], unique=False)
    op.drop_constraint(op.f('uq_paper_authors_paper_author'), 'paper_authors', type_='unique')
    op.create_unique_constraint('uq_paper_authors_paper_author', 'paper_authors', ['paper_id', 'author_name'])
    op.create_index(op.f('ix_paper_authors_paper_id'), 'paper_authors', ['paper_id'], unique=False)
    op.drop_constraint(op.f('paper_authors_paperId_fkey'), 'paper_authors', type_='foreignkey')
    op.create_foreign_key(None, 'paper_authors', 'papers', ['paper_id'], ['id'], ondelete='CASCADE')
    op.drop_column('paper_authors', 'updatedAt')
    op.drop_column('paper_authors', 'deletedAt')
    op.drop_column('paper_authors', 'createdAt')
    op.drop_column('paper_authors', 'authorName')
    op.drop_column('paper_authors', 'paperId')
    op.add_column('papers', sa.Column('paper_published_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('papers', sa.Column('paper_updated_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('papers', sa.Column('entry_id', sa.String(length=1000), nullable=False))
    op.add_column('papers', sa.Column('pdf_url', sa.String(length=1000), nullable=False))
    op.add_column('papers', sa.Column('primary_category', sa.String(length=1000), nullable=False))
    op.add_column('papers', sa.Column('lab_id', sa.Integer(), nullable=False))
    op.add_column('papers', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('papers', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('papers', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.drop_index(op.f('ix_papers_labId'), table_name='papers')
    op.drop_index(op.f('ix_papers_lab'), table_name='papers')
    op.create_index('ix_papers_lab', 'papers', ['lab_id'], unique=False)
    op.drop_index(op.f('ix_papers_published_at'), table_name='papers')
    op.create_index('ix_papers_published_at', 'papers', ['paper_published_at'], unique=False)
    op.drop_constraint(op.f('uq_papers_lab_arxiv'), 'papers', type_='unique')
    op.create_unique_constraint('uq_papers_lab_arxiv', 'papers', ['lab_id', 'id'])
    op.create_index(op.f('ix_papers_lab_id'), 'papers', ['lab_id'], unique=False)
    op.drop_constraint(op.f('papers_labId_fkey'), 'papers', type_='foreignkey')
    op.create_foreign_key(None, 'papers', 'labs', ['lab_id'], ['id'], ondelete='CASCADE')
    op.drop_column('papers', 'paperPublishedAt')
    op.drop_column('papers', 'primaryCategory')
    op.drop_column('papers', 'updatedAt')
    op.drop_column('papers', 'labId')
    op.drop_column('papers', 'deletedAt')
    op.drop_column('papers', 'paperUpdatedAt')
    op.drop_column('papers', 'entryId')
    op.drop_column('papers', 'createdAt')
    op.drop_column('papers', 'pdfUrl')
    op.add_column('users', sa.Column('hashed_password', sa.String(length=255), nullable=False))
    op.add_column('users', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('users', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.drop_column('users', 'createdAt')
    op.drop_column('users', 'hashedPassword')
    op.drop_column('users', 'updatedAt')
    op.drop_column('users', 'deletedAt')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('deletedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('hashedPassword', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_column('users', 'deleted_at')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'hashed_password')
    op.add_column('papers', sa.Column('pdfUrl', sa.VARCHAR(length=1000), autoincrement=False, nullable=False))
    op.add_column('papers', sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('papers', sa.Column('entryId', sa.VARCHAR(length=1000), autoincrement=False, nullable=False))
    op.add_column('papers', sa.Column('paperUpdatedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.add_column('papers', sa.Column('deletedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('papers', sa.Column('labId', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('papers', sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('papers', sa.Column('primaryCategory', sa.VARCHAR(length=1000), autoincrement=False, nullable=False))
    op.add_column('papers', sa.Column('paperPublishedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'papers', type_='foreignkey')
    op.create_foreign_key(op.f('papers_labId_fkey'), 'papers', 'labs', ['labId'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_papers_lab_id'), table_name='papers')
    op.drop_constraint('uq_papers_lab_arxiv', 'papers', type_='unique')
    op.create_unique_constraint(op.f('uq_papers_lab_arxiv'), 'papers', ['labId', 'id'], postgresql_nulls_not_distinct=False)
    op.drop_index('ix_papers_published_at', table_name='papers')
    op.create_index(op.f('ix_papers_published_at'), 'papers', ['paperPublishedAt'], unique=False)
    op.drop_index('ix_papers_lab', table_name='papers')
    op.create_index(op.f('ix_papers_lab'), 'papers', ['labId'], unique=False)
    op.create_index(op.f('ix_papers_labId'), 'papers', ['labId'], unique=False)
    op.drop_column('papers', 'deleted_at')
    op.drop_column('papers', 'updated_at')
    op.drop_column('papers', 'created_at')
    op.drop_column('papers', 'lab_id')
    op.drop_column('papers', 'primary_category')
    op.drop_column('papers', 'pdf_url')
    op.drop_column('papers', 'entry_id')
    op.drop_column('papers', 'paper_updated_at')
    op.drop_column('papers', 'paper_published_at')
    op.add_column('paper_authors', sa.Column('paperId', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('paper_authors', sa.Column('authorName', sa.VARCHAR(length=1000), autoincrement=False, nullable=False))
    op.add_column('paper_authors', sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('paper_authors', sa.Column('deletedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('paper_authors', sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'paper_authors', type_='foreignkey')
    op.create_foreign_key(op.f('paper_authors_paperId_fkey'), 'paper_authors', 'papers', ['paperId'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_paper_authors_paper_id'), table_name='paper_authors')
    op.drop_constraint('uq_paper_authors_paper_author', 'paper_authors', type_='unique')
    op.create_unique_constraint(op.f('uq_paper_authors_paper_author'), 'paper_authors', ['paperId', 'authorName'], postgresql_nulls_not_distinct=False)
    op.drop_index('ix_paper_authors_paper', table_name='paper_authors')
    op.create_index(op.f('ix_paper_authors_paper'), 'paper_authors', ['paperId'], unique=False)
    op.create_index(op.f('ix_paper_authors_paperId'), 'paper_authors', ['paperId'], unique=False)
    op.drop_column('paper_authors', 'deleted_at')
    op.drop_column('paper_authors', 'updated_at')
    op.drop_column('paper_authors', 'created_at')
    op.drop_column('paper_authors', 'paper_id')
    op.drop_column('paper_authors', 'author_name')
    op.add_column('labs', sa.Column('deletedAt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('labs', sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('labs', sa.Column('ownerId', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('labs', sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'labs', type_='foreignkey')
    op.create_foreign_key(op.f('labs_ownerId_fkey'), 'labs', 'users', ['ownerId'], ['id'], ondelete='CASCADE')
    op.drop_constraint('uix_owner_name', 'labs', type_='unique')
    op.create_unique_constraint(op.f('uix_owner_name'), 'labs', ['ownerId', 'name'], postgresql_nulls_not_distinct=False)
    op.drop_column('labs', 'deleted_at')
    op.drop_column('labs', 'updated_at')
    op.drop_column('labs', 'created_at')
    op.drop_column('labs', 'owner_id')
    # ### end Alembic commands ###
